<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context.xsd">
    <context:component-scan base-package="com.qlchat.cache" />

    <!-- Redis 配置 -->
    <!-- jedis 配置 -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!--控制一个pool可分配多少个jedis实例-->
        <property name="maxTotal" value="${QLCHAT_REDIS_POOL_MAXACTIVE}" /> <!-- 最大能够保持idel状态的对象数 -->
        <!--控制一个pool最多有多少个状态为idle(空闲)的jedis实例；-->
        <property name="maxIdle" value="${QLCHAT_REDIS_POOL_MAXIDLE}" /> <!-- 最大分配的对象数 -->
        <property name="minIdle" value="1" />
        <!--表示当borrow一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException-->
        <property name="maxWaitMillis" value="${QLCHAT_REDIS_POOL_MAXWAIT}" />
        <!--在borrow一个jedis实例时，是否提前进行alidate操作；如果为true，则得到的jedis实例均是可用的；-->
        <property name="testOnBorrow" value="${QLCHAT_REDIS_POOL_TESTONBORROW}"/> <!-- 当调用borrow
			Object方法时，是否进行有效性检查 -->
    </bean>

    <!-- 加载文件 已经改为环境变量获取 -->
    <!--<context:property-placeholder location="classpath:redis.properties" />-->
    <!-- redis工具类 -->
    <!-- redis服务器中心 -->
    <bean id="connectionFactory"
          class="com.qlchat.cache.RedisConnectionFactory">
        <property name="hostName" value="${redis.servers}" />
        <!--<property name="port" value="6379"></property>-->
        <property name="password" value="#{'${redis.password}'!=''?'${redis.password}':null}" />
        <property name="poolConfig" ref="jedisPoolConfig" />
    </bean>

    <!--template-->
    <!-- redis操作模板，面向对象的模板 -->
    <bean id="zsetRedisTemplate" class="com.qlchat.cache.template.ZSetRedisTemplate">
        <property name="connectionFactory" ref="connectionFactory" />
    </bean>

    <bean id="listRedisTemplate" class="com.qlchat.cache.template.ListRedisTemplate">
        <property name="connectionFactory" ref="connectionFactory" />
    </bean>

    <bean id="setRedisTemplate" class="com.qlchat.cache.template.SetRedisTemplate">
        <property name="connectionFactory" ref="connectionFactory" />
    </bean>

    <bean id="valueRedisTemplate" class="com.qlchat.cache.template.ValueRedisTemplate">
        <property name="connectionFactory" ref="connectionFactory" />
        <!--&lt;!&ndash; 如果不配置Serializer，那么存储的时候只能使用String，如果用对象类型存储，那么会提示错误 &ndash;&gt;-->
        <!--<property name="keySerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
        <!--</property>-->
        <!--<property name="valueSerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />-->
        <!--</property>-->
    </bean>

    <bean id="hashRedisTemplate" class="com.qlchat.cache.template.HashRedisTemplate">
        <property name="connectionFactory" ref="connectionFactory" />
    </bean>

    <bean id="hyperLogLogTemplate" class="com.qlchat.cache.template.HyperLogLogTemplate">
        <property name="connectionFactory" ref="connectionFactory" />
    </bean>

</beans>