<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 自动扫描该包， -->
    <context:component-scan base-package="com.qlchat.controller"/>

    <!--上面的这个例子是引入Component组件的例子，其中base-package表示为需要扫描的所有子包。-->
    <!--共同点：被@controller 、@service、@repository 、@component 注解的类，都会把这些类纳入进spring容器中进行管理-->

    <!--以bean的形式配置视图解析器，与web.xml 中<filter-mapping> 关联-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- 开启事务控制的注解支持 -->

    <!--事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 使用注解事务，需要添加Transactional注解属性 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--启用最新的注解器、映射器-->
    <mvc:annotation-driven/>

    <!--异常处理器-->
    <bean  class="com.qlchat.exception.ExceptionResolver"/>

    <!--配置拦截器，实现验签名-->
    <mvc:interceptors>

        <mvc:interceptor>
            <!-- 拦截所有URL中包含/api/的请求 -->
            <mvc:mapping path="/api/**"/>
            <bean class="com.qlchat.interceptor.ApiInterceptor"></bean>
        </mvc:interceptor>
        <!--对所有的请求记性拦截-->
        <!--<bean class="com.qlchat.interceptor.LoginInterceptor"/>-->
        <!--对特定的请求进行拦截-->
        <mvc:interceptor>
            <!--进行拦截的路径-->
            <!-- 拦截所有的请求，这个必须写在前面，也就是写在【不拦截】的上面 -->
            <mvc:mapping path="/**"/>
            <!--不进行拦截的路径-->
            <mvc:exclude-mapping path="/login"/>
            <mvc:exclude-mapping path="/api/**"/>
            <bean class="com.qlchat.interceptor.LoginInterceptor"/>
        </mvc:interceptor>

    </mvc:interceptors>


</beans>